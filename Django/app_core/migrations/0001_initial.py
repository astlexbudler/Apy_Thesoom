# Generated by Django 5.1.2 on 2025-02-20 22:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PLACE',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='장소 이름')),
                ('intro', models.CharField(max_length=500, verbose_name='짧은 소개')),
                ('location', models.CharField(max_length=255, verbose_name='장소')),
                ('location_link', models.CharField(max_length=300, verbose_name='장소')),
                ('description', models.TextField(verbose_name='소개(html)')),
                ('status', models.CharField(max_length=50, verbose_name='상태')),
                ('discount_from_price', models.PositiveIntegerField(verbose_name='할인 전 가격')),
                ('final_from_price', models.PositiveIntegerField(verbose_name='할인 후 가격')),
            ],
        ),
        migrations.CreateModel(
            name='ACCOUNT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('contact', models.CharField(max_length=60)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PLACE_IMAGE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='place_images/')),
                ('image_type', models.CharField(max_length=50, verbose_name='이미지 타입, main, sub')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='이미지 표시 순서')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='app_core.place')),
            ],
        ),
        migrations.CreateModel(
            name='PLACE_ITEM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='place_items/')),
                ('name', models.CharField(max_length=255, verbose_name='상품 이름')),
                ('description', models.TextField(verbose_name='설명(html)')),
                ('price', models.PositiveIntegerField(verbose_name='가격')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app_core.place')),
            ],
        ),
        migrations.CreateModel(
            name='ITEM_DATE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(verbose_name='연도')),
                ('month', models.PositiveIntegerField(verbose_name='월')),
                ('date', models.PositiveIntegerField(verbose_name='날짜')),
                ('content', models.TextField(verbose_name='표시할 내용')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app_core.place_item')),
            ],
        ),
        migrations.CreateModel(
            name='PURCHASE',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_start_datetime', models.DateTimeField(verbose_name='예약 시작 일시')),
                ('book_end_datetime', models.DateTimeField(verbose_name='예약 종료 일시')),
                ('memo', models.TextField(verbose_name='요청 사항')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='결제 시작 일시')),
                ('purchase_at', models.DateTimeField(blank=True, null=True, verbose_name='결제 완료 일시')),
                ('payment_agency', models.CharField(max_length=255, verbose_name='결제사')),
                ('payment_method', models.CharField(max_length=255, verbose_name='결제 방법')),
                ('payment_info', models.JSONField(verbose_name='결제 정보(json)')),
                ('status', models.CharField(max_length=50, verbose_name='결제 상태, pending, completed, canceled, refunded')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='app_core.place_item')),
            ],
        ),
        migrations.CreateModel(
            name='REVIEW',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.PositiveIntegerField(verbose_name='평점')),
                ('content', models.TextField(verbose_name='내용')),
                ('images', models.FileField(blank=True, null=True, upload_to='review_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='app_core.place')),
            ],
        ),
    ]
